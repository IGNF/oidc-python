# -*- coding: utf-8 -*-
"""
/***************************************************************************
 KeycloakAuthPluginDialog
                                 A QGIS plugin
 Un plugin pour tester l'authentification via Keycloak
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-02-15
        git sha              : $Format:%H$
        copyright            : (C) 2023 by IGN
        email                : orka.cruze@ign.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.gui import QgsMessageBar

from .lib.ign_keycloak.KeycloakService import KeycloakService

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "keycloak_auth_plugin_dialog_base.ui")
)

KEYCLOAK_SERVER_URI = "https://sso.com/"
KEYCLOAK_CLIENT_ID = "client-id"  # <-- Remplacer par le client_id de votre application
KEYCLOAK_CLIENT_SECRET = (
    "client-secret"  # <-- Remplacer par le client_secret de votre application
)
KEYCLOAK_REALM_NAME = "realm-name"  # <-- Remplacer par le nom de votre realm

# renseigner le proxy si besoin
# PROXY = "http://proxy.com:3128"
# proxies = {"http": PROXY, "https": PROXY}


class KeycloakAuthPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(KeycloakAuthPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.keycloak_service = KeycloakService(
            KEYCLOAK_SERVER_URI,
            KEYCLOAK_REALM_NAME,
            KEYCLOAK_CLIENT_ID,
            client_secret=KEYCLOAK_CLIENT_SECRET,
            # proxies=proxies,
            ssl_verify=False,
        )

        self.pbLogin.clicked.connect(self.login)
        self.pbLogout.clicked.connect(self.logout)

    def login(self):
        # r = self.keycloak_service.get_well_known_config()
        # pprint(r)

        r = self.keycloak_service.get_authorization_code(
            ["email", "profile", "openid", "roles"]
        )

        r = self.keycloak_service.get_access_token(r["code"][0])

        r = self.keycloak_service.get_userinfo(r["access_token"])

        self.txtDisplay.setText(r.__str__())
        self.pbLogin.setEnabled(False)
        self.pbLogout.setEnabled(True)

    def logout(self):
        self.keycloak_service.logout()
        self.pbLogout.setEnabled(False)
        self.pbLogin.setEnabled(True)
        self.txtDisplay.clear()
